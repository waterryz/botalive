import os
import json
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from parser import get_journal_with_cookie, extract_grades_from_html
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")

if not BOT_TOKEN or not APP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ APP_URL –Ω–µ –∑–∞–¥–∞–Ω—ã!")

COOKIE_FILE = "cookies.json"
if not os.path.exists(COOKIE_FILE):
    with open(COOKIE_FILE, "w") as f:
        json.dump({}, f)

def save_cookie(user_id, cookie):
    with open(COOKIE_FILE, "r+", encoding="utf-8") as f:
        data = json.load(f)
        data[str(user_id)] = cookie
        f.seek(0)
        json.dump(data, f, ensure_ascii=False, indent=2)
        f.truncate()

def load_cookie(user_id):
    with open(COOKIE_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
        return data.get(str(user_id))

# --- Telegram Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å cookie", url=f"{APP_URL}/how_to_cookie")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é cookie (–Ω–∞–ø—Ä–∏–º–µ—Ä, `college_session=...; XSRF-TOKEN=...`), "
        "–∏ —è –ø–æ–∫–∞–∂—É —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å cookie ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_cookie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cookie_string = update.message.text.strip()
    save_cookie(user_id, cookie_string)
    await update.message.reply_text("‚úÖ Cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è—é –∂—É—Ä–Ω–∞–ª...")

    html = await get_journal_with_cookie(cookie_string)
    if not html:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. Cookie —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞.")
        return

    grades = extract_grades_from_html(html)
    await update.message.reply_text(grades or "üì≠ –û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")

async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cookie = load_cookie(user_id)

    if not cookie:
        await update.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π cookie. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return

    await update.message.reply_text("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª–∞...")

    html = await get_journal_with_cookie(cookie)
    if not html:
        await update.message.reply_text("‚ùå Cookie —É—Å—Ç–∞—Ä–µ–ª–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return

    grades = extract_grades_from_html(html)
    await update.message.reply_text(grades or "üì≠ –û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")

# --- Flask App ---
app = Flask(__name__)

@app.route("/")
def home():
    return "<h1>ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!</h1>", 200

@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, tg_app.bot)
    asyncio.run(tg_app.process_update(update))
    return "ok", 200

# --- Telegram App ---
tg_app = Application.builder().token(BOT_TOKEN).build()
tg_app.add_handler(CommandHandler("start", start))
tg_app.add_handler(CommandHandler("refresh", refresh))
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cookie))

if __name__ == "__main__":
    import threading

    async def set_webhook():
        await tg_app.bot.set_webhook(f"{APP_URL}/webhook/{BOT_TOKEN}", drop_pending_updates=True)

    asyncio.run(set_webhook())

    # Flask –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))).start()

    print("üöÄ Flask + Telegram Webhook –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
