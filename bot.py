import os
import json
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
from parser import get_journal_with_cookie, extract_grades_from_html

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")

if not BOT_TOKEN or not APP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ APP_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ Render Environment Variables!")

# === –§–∞–π–ª —Å cookies ===
COOKIE_FILE = "cookies.json"
if not os.path.exists(COOKIE_FILE):
    with open(COOKIE_FILE, "w") as f:
        json.dump({}, f)

def save_cookie(user_id, cookie):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç cookie –≤ JSON"""
    with open(COOKIE_FILE, "r+") as f:
        data = json.load(f)
        data[str(user_id)] = cookie
        f.seek(0)
        json.dump(data, f)
        f.truncate()

def load_cookie(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookie –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with open(COOKIE_FILE, "r") as f:
        data = json.load(f)
        return data.get(str(user_id))

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –∏–∑ Snation College.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é cookie (–Ω–∞–ø—Ä–∏–º–µ—Ä, `laravel_session=...; XSRF-TOKEN=...`).\n"
        "‚öôÔ∏è –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ /refresh, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏."
    )

async def handle_cookie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cookie_string = update.message.text.strip()

    save_cookie(user_id, cookie_string)
    await update.message.reply_text("‚úÖ Cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–∞—é –∂—É—Ä–Ω–∞–ª...")

    html = await get_journal_with_cookie(cookie_string)
    if not html:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å —ç—Ç–æ–π cookie. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    grades = extract_grades_from_html(html)
    await update.message.reply_text(grades, parse_mode="Markdown")

async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cookie = load_cookie(user_id)

    if not cookie:
        await update.message.reply_text("‚ö†Ô∏è Cookie –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –µ—ë —Å–Ω–æ–≤–∞.")
        return

    await update.message.reply_text("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –æ—Ü–µ–Ω–∫–∏...")

    html = await get_journal_with_cookie(cookie)
    if not html:
        await update.message.reply_text("‚ùå Cookie —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return

    grades = extract_grades_from_html(html)
    await update.message.reply_text(grades, parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook –Ω–∞ Render...")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("refresh", refresh))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cookie))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=f"{APP_URL}/webhook/{BOT_TOKEN}",
        drop_pending_updates=True,
    )
