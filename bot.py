import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from parser import get_journal_with_cookie, extract_grades_from_html
from db import init_db, save_cookie, get_cookie
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –≤ Render Environment Variables!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –°”ô–ª–µ–º! / –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ë“±–ª –±–æ—Ç Snation College —Å–∞–π—Ç—ã–Ω–¥–∞“ì—ã –∂—É—Ä–Ω–∞–ª–¥–∞–Ω –±–∞“ì–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é *cookie* —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä):\n\n"
        "`laravel_session=...; XSRF-TOKEN=...`\n\n"
        "Cookie –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ).",
        parse_mode="Markdown"
    )


@dp.message(Command("refresh"))
async def refresh_command(message: types.Message):
    user_id = message.from_user.id
    cookie = get_cookie(user_id)

    if not cookie:
        await message.answer("‚ö†Ô∏è Cookie –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å –µ—ë —Å–Ω–æ–≤–∞.")
        return

    await message.answer("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª–∞...")

    try:
        html = await get_journal_with_cookie(cookie)
        if not html:
            await message.answer("‚ùå Cookie —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
            return

        grades = extract_grades_from_html(html)
        await message.answer(grades, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message()
async def handle_cookie(message: types.Message):
    try:
        cookie = message.text.strip()
        user_id = message.from_user.id

        await message.answer("üîê Cookie –ø–æ–ª—É—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è—é...")

        html = await get_journal_with_cookie(cookie)
        if not html:
            await message.answer("‚ùå Cookie –Ω–µ–≤–µ—Ä–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return

        save_cookie(user_id, cookie)

        grades = extract_grades_from_html(html)
        await message.answer(grades, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def main():
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (polling mode)...")
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
