import os
import asyncio
import json
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from parser import get_journal_with_cookie, extract_grades_from_html

# ==============================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –ø—Ä–∏–º–µ—Ä: https://botalive.onrender.com

if not BOT_TOKEN or not APP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ APP_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

COOKIE_FILE = "cookies.json"

# ==============================
# üíæ –†–∞–±–æ—Ç–∞ —Å cookies
# ==============================
if not os.path.exists(COOKIE_FILE):
    with open(COOKIE_FILE, "w") as f:
        json.dump({}, f)


def save_cookie(user_id, cookie):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç cookie –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with open(COOKIE_FILE, "r+") as f:
        data = json.load(f)
        data[str(user_id)] = cookie
        f.seek(0)
        json.dump(data, f, indent=2)
        f.truncate()


def load_cookie(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookie –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with open(COOKIE_FILE, "r") as f:
        data = json.load(f)
        return data.get(str(user_id))


# ==============================
# üí¨ Telegram-—Ö—ç–Ω–¥–ª–µ—Ä—ã
# ==============================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ —Å —Å–∞–π—Ç–∞ *college.snation.kz*.\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é cookie —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ:\n"
        "`college_session=...; XSRF-TOKEN=...`\n\n"
        "‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º",
        parse_mode="Markdown"
    )


@dp.message()
async def handle_cookie(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π cookie"""
    user_id = message.from_user.id
    cookie = message.text.strip()

    if "college_session=" not in cookie:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookie. –ü—Ä–∏–º–µ—Ä:\n`college_session=...; XSRF-TOKEN=...`", parse_mode="Markdown")
        return

    save_cookie(user_id, cookie)
    await message.answer("‚úÖ Cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–∞—é –∂—É—Ä–Ω–∞–ª...")

    html = await get_journal_with_cookie(cookie)
    if not html:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å cookie ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    grades = extract_grades_from_html(html)
    await message.answer(grades, parse_mode="Markdown")


# ==============================
# üåê Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (Webhook)
# ==============================
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)


@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    """–ü—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    data = request.get_json(force=True)
    update = types.Update(**data)

    # –ö–∏–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ event loop, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Timeout context
    asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)

    return "ok", 200


@app.route("/", methods=["GET"])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Flask + Aiogram (–≤–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–µ–Ω)"


# ==============================
# üöÄ –ó–∞–ø—É—Å–∫
# ==============================
async def main():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    await bot.set_webhook(f"{APP_URL}/webhook/{BOT_TOKEN}")
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_URL}/webhook/{BOT_TOKEN}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread

    loop.create_task(main())
    Thread(target=loop.run_forever, daemon=True).start()

    print("üöÄ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
