import httpx
from bs4 import BeautifulSoup

async def get_journal_with_cookie(cookie: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂—É—Ä–Ω–∞–ª–∞ –ø–æ cookie –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    url = "https://college.snation.kz/kz/tko/control/journals/873751/load-table?year_month=10%2F2025"
    headers = {
        "Cookie": cookie,
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers, timeout=20)
            if response.status_code == 200:
                return response.text
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    return None


def extract_grades_from_html(html: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ (points) –∏–∑ HTML –∂—É—Ä–Ω–∞–ª–∞ Snation College.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–µ–¥–º–µ—Ç, –∞ —è—á–µ–π–∫–∏ ‚Äî –æ—Ü–µ–Ω–∫–∏.
    """
    soup = BeautifulSoup(html, "html.parser")

    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –∂—É—Ä–Ω–∞–ª–∞ (–∏—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ tr)
    rows = soup.find_all("tr")
    if not rows:
        return "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    result = []
    for row in rows:
        # –ü—Ä–µ–¥–º–µ—Ç ‚Äî –æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤–æ–º <td> —Å –∫–ª–∞—Å—Å–æ–º 'discipline_name' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π
        subject_cell = row.find("td", class_="discipline_name") or row.find("td")
        if not subject_cell:
            continue

        subject_name = subject_cell.get_text(strip=True)
        if not subject_name:
            continue

        # –ò—â–µ–º –æ—Ü–µ–Ω–∫–∏ ‚Äî –º–æ–≥—É—Ç –±—ã—Ç—å –≤ <td data-points="X"> –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ <div class="points">
        points_cells = row.find_all(lambda tag: tag.name == "td" and ("points" in tag.get("class", []) or tag.get("data-points")))
        points = []

        for cell in points_cells:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç
            val = cell.get("data-points") or cell.get_text(strip=True)
            if val and val.isdigit():
                points.append(val)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –≤ <div> –≤–Ω—É—Ç—Ä–∏)
        if not points:
            for div in row.find_all("div", class_="points"):
                text = div.get_text(strip=True)
                if text:
                    points.append(text)

        if points:
            result.append(f"üìò *{subject_name}*: {', '.join(points)}")

    if not result:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ü–µ–Ω–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."

    return "\n".join(result)
